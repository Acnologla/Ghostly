{"version":3,"file":"pixi-tilemap.umd.js","sources":["../src/CanvasTileRenderer.ts","../src/Constant.ts","../src/RectTileLayer.ts","../src/CompositeRectTileLayer.ts","../src/GraphicsLayer.ts","../src/MultiTextureResource.ts","../src/shaderGenerator.ts","../src/RectTileShader.ts","../src/TileRenderer.ts","../src/ZLayer.ts","../src/index.ts"],"sourcesContent":["/// <reference path=\"types.d.ts\" />\r\n\r\nimport { Renderer } from '@pixi/core';\r\n\r\nexport class CanvasTileRenderer {\r\n    renderer: Renderer;\r\n    tileAnim = [0, 0];\r\n    dontUseTransform = false;\r\n\r\n    constructor(renderer: Renderer) {\r\n        this.renderer = renderer;\r\n        this.tileAnim = [0, 0];\r\n    }\r\n}\r\n\r\nconst cr = (PIXI as any).CanvasRenderer;\r\n\r\nif (cr) {\r\n    cr.registerPlugin('tilemap', CanvasTileRenderer);\r\n}\r\n","/// <reference path=\"types.d.ts\" />\r\n\r\nimport { SCALE_MODES } from '@pixi/constants';\r\n\r\nexport const Constant = {\r\n    maxTextures: 16,\r\n    bufferSize: 2048,\r\n    boundSize: 1024,\r\n    boundCountPerBuffer: 1,\r\n    use32bitIndex: false,\r\n    SCALE_MODE: SCALE_MODES.LINEAR,\r\n    DO_CLEAR: true\r\n};","/// <reference path=\"types.d.ts\" />\r\n\r\nimport { Container, Bounds } from '@pixi/display';\r\nimport { Constant } from './Constant';\r\nimport { DRAW_MODES } from '@pixi/constants';\r\nimport { Texture, Renderer } from '@pixi/core';\r\nimport { TileRenderer } from './TileRenderer';\r\nimport { Matrix, Rectangle, groupD8 } from '@pixi/math';\r\n\r\nimport type { RectTileGeom } from './RectTileShader';\r\n\r\nexport const POINT_STRUCT_SIZE = 12;\r\n\r\nexport class RectTileLayer extends Container {\r\n    constructor(zIndex: number, texture: Texture | Array<Texture>) {\r\n        super();\r\n        this.initialize(zIndex, texture);\r\n    }\r\n\r\n    zIndex = 0;\r\n    modificationMarker = 0;\r\n    _$_localBounds = new Bounds();\r\n    shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\r\n    _globalMat: Matrix = null;\r\n\r\n    pointsBuf: Array<number> = [];\r\n    hasAnim = false;\r\n    textures: Array<Texture>;\r\n\r\n    offsetX = 0;\r\n    offsetY = 0;\r\n    compositeParent = false;\r\n    tileAnim: Array<number> = null;\r\n\r\n    initialize(zIndex: number, textures: Texture | Array<Texture>) {\r\n        if (!textures) {\r\n            textures = [];\r\n        } else if (!(textures instanceof Array) && (textures as Texture).baseTexture) {\r\n            textures = [textures as Texture];\r\n        }\r\n        this.textures = textures as Array<Texture>;\r\n        this.zIndex = zIndex;\r\n        // this.visible = false;\r\n    }\r\n\r\n    clear() {\r\n        this.pointsBuf.length = 0;\r\n        this.modificationMarker = 0;\r\n        this._$_localBounds.clear();\r\n        this.hasAnim = false;\r\n    }\r\n\r\n    addFrame(texture_: Texture | String | number, x: number, y: number, animX: number, animY: number) {\r\n        let texture: Texture;\r\n        let textureIndex = 0;\r\n\r\n        if (typeof texture_ === \"number\") {\r\n            textureIndex = texture_;\r\n            texture = this.textures[textureIndex];\r\n        } else {\r\n            if (typeof texture_ === \"string\") {\r\n                texture = Texture.from(texture_);\r\n            } else {\r\n                texture = texture_ as Texture;\r\n            }\r\n\r\n            let found = false;\r\n            let textureList = this.textures;\r\n            for (let i = 0; i < textureList.length; i++) {\r\n                if (textureList[i].baseTexture === texture.baseTexture) {\r\n                    textureIndex = i;\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!found) {\r\n                // textureIndex = this.textures.length;\r\n                // this.textures.push(texture);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this.addRect(textureIndex, texture.frame.x, texture.frame.y, x, y, texture.orig.width, texture.orig.height, animX, animY, texture.rotate);\r\n        return true;\r\n    }\r\n\r\n    addRect(textureIndex: number, u: number, v: number, x: number, y: number, tileWidth: number, tileHeight: number,\r\n            animX: number = 0, animY: number = 0, rotate: number = 0, animCountX: number = 1024, animCountY: number = 1024): this {\r\n        let pb = this.pointsBuf;\r\n        this.hasAnim = this.hasAnim || animX > 0 || animY > 0;\r\n        pb.push(u);\r\n        pb.push(v);\r\n        pb.push(x);\r\n        pb.push(y);\r\n        pb.push(tileWidth);\r\n        pb.push(tileHeight);\r\n        pb.push(rotate);\r\n        pb.push(animX | 0);\r\n        pb.push(animY | 0);\r\n        pb.push(textureIndex);\r\n        pb.push(animCountX);\r\n        pb.push(animCountY);\r\n\r\n        this._$_localBounds.addFramePad(x, y, x+tileWidth, y+tileHeight, 0, 0);\r\n\r\n        return this;\r\n    }\r\n\r\n    tileRotate(rotate: number) {\r\n        const pb = this.pointsBuf;\r\n        pb[pb.length - 3] = rotate;\r\n    }\r\n\r\n    tileAnimX(offset: number, count: number) {\r\n        const pb = this.pointsBuf;\r\n\r\n        pb[pb.length - 5] = offset;\r\n        pb[pb.length - 2] = count;\r\n    }\r\n\r\n    tileAnimY(offset: number, count: number) {\r\n        const pb = this.pointsBuf;\r\n\r\n        pb[pb.length - 4] = offset;\r\n        pb[pb.length - 1] = count;\r\n    }\r\n\r\n    renderCanvas(renderer: any) {\r\n        let plugin = renderer.plugins.tilemap;\r\n        if (!plugin.dontUseTransform) {\r\n            let wt = this.worldTransform;\r\n            renderer.context.setTransform(\r\n                wt.a,\r\n                wt.b,\r\n                wt.c,\r\n                wt.d,\r\n                wt.tx * renderer.resolution,\r\n                wt.ty * renderer.resolution\r\n            );\r\n        }\r\n        this.renderCanvasCore(renderer);\r\n    }\r\n\r\n    renderCanvasCore(renderer: any) {\r\n        if (this.textures.length === 0) return;\r\n        let points = this.pointsBuf;\r\n        const tileAnim = this.tileAnim || renderer.plugins.tilemap.tileAnim;\r\n        renderer.context.fillStyle = '#000000';\r\n        for (let i = 0, n = points.length; i < n; i += POINT_STRUCT_SIZE) {\r\n            let x1 = points[i], y1 = points[i + 1];\r\n            let x2 = points[i + 2], y2 = points[i + 3];\r\n            let w = points[i + 4];\r\n            let h = points[i + 5];\r\n            var rotate = points[i + 6];\r\n            x1 += points[i + 7] * tileAnim[0];\r\n            y1 += points[i + 8] * tileAnim[1];\r\n            let textureIndex = points[i + 9];\r\n            // canvas does not work with rotate yet\r\n            if (textureIndex >= 0) {\r\n                renderer.context.drawImage((this.textures[textureIndex].baseTexture as any).getDrawableSource(), x1, y1, w, h, x2, y2, w, h);\r\n            } else {\r\n                renderer.context.globalAlpha = 0.5;\r\n                renderer.context.fillRect(x2, y2, w, h);\r\n                renderer.context.globalAlpha = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    vbId = 0;\r\n    vb: RectTileGeom = null;\r\n    vbBuffer: ArrayBuffer = null;\r\n    vbArray: Float32Array = null;\r\n    vbInts: Uint32Array = null;\r\n\r\n    destroyVb() {\r\n        if (this.vb) {\r\n            this.vb.destroy();\r\n            this.vb = null;\r\n        }\r\n    }\r\n\r\n    render(renderer: Renderer) {\r\n        let plugin = (renderer.plugins as any)['tilemap'];\r\n        let shader = plugin.getShader();\r\n        renderer.batch.setObjectRenderer(plugin);\r\n        this._globalMat = shader.uniforms.projTransMatrix;\r\n        renderer.globalUniforms.uniforms.projectionMatrix.copyTo(this._globalMat).append(this.worldTransform);\r\n        shader.uniforms.shadowColor = this.shadowColor;\r\n        shader.uniforms.animationFrame = this.tileAnim || plugin.tileAnim;\r\n        this.renderWebGLCore(renderer, plugin);\r\n    }\r\n\r\n    renderWebGLCore(renderer: Renderer, plugin: TileRenderer) {\r\n        let points = this.pointsBuf;\r\n        if (points.length === 0) return;\r\n        let rectsCount = points.length / POINT_STRUCT_SIZE;\r\n\r\n        let shader = plugin.getShader();\r\n        let textures = this.textures;\r\n        if (textures.length === 0) return;\r\n\r\n        plugin.bindTextures(renderer, shader, textures);\r\n        renderer.shader.bind(shader, false);\r\n\r\n        //lost context! recover!\r\n        let vb = this.vb;\r\n        if (!vb) {\r\n            vb = plugin.createVb();\r\n            this.vb = vb;\r\n            this.vbId = (vb as any).id;\r\n            this.vbBuffer = null;\r\n            this.modificationMarker = 0;\r\n        }\r\n\r\n        plugin.checkIndexBuffer(rectsCount, vb);\r\n        const boundCountPerBuffer = Constant.boundCountPerBuffer;\r\n\r\n        let vertexBuf = vb.getBuffer('aVertexPosition');\r\n        //if layer was changed, re-upload vertices\r\n        let vertices = rectsCount * vb.vertPerQuad;\r\n        if (vertices === 0) return;\r\n        if (this.modificationMarker !== vertices) {\r\n            this.modificationMarker = vertices;\r\n            let vs = vb.stride * vertices;\r\n            if (!this.vbBuffer || this.vbBuffer.byteLength < vs) {\r\n                //!@#$ happens, need resize\r\n                let bk = vb.stride;\r\n                while (bk < vs) {\r\n                    bk *= 2;\r\n                }\r\n                this.vbBuffer = new ArrayBuffer(bk);\r\n                this.vbArray = new Float32Array(this.vbBuffer);\r\n                this.vbInts = new Uint32Array(this.vbBuffer);\r\n                vertexBuf.update(this.vbBuffer);\r\n            }\r\n\r\n            let arr = this.vbArray, ints = this.vbInts;\r\n            //upload vertices!\r\n            let sz = 0;\r\n            //let tint = 0xffffffff;\r\n            let textureId: number = 0;\r\n            let shiftU: number = this.offsetX;\r\n            let shiftV: number = this.offsetY;\r\n\r\n            //let tint = 0xffffffff;\r\n            let tint = -1;\r\n            for (let i = 0; i < points.length; i += POINT_STRUCT_SIZE) {\r\n                let eps = 0.5;\r\n                if (this.compositeParent) {\r\n                    if (boundCountPerBuffer > 1) {\r\n                        //TODO: what if its more than 4?\r\n                        textureId = (points[i + 9] >> 2);\r\n                        shiftU = this.offsetX * (points[i + 9] & 1);\r\n                        shiftV = this.offsetY * ((points[i + 9] >> 1) & 1);\r\n                    } else {\r\n                        textureId = points[i + 9];\r\n                        shiftU = 0;\r\n                        shiftV = 0;\r\n                    }\r\n                }\r\n                let x = points[i + 2], y = points[i + 3];\r\n                let w = points[i + 4], h = points[i + 5];\r\n                let u = points[i] + shiftU, v = points[i + 1] + shiftV;\r\n                let rotate = points[i + 6];\r\n\r\n                const animX = points[i + 7], animY = points[i + 8];\r\n                const animWidth = points[i + 10] || 1024, animHeight = points[i + 11] || 1024;\r\n                const animXEncoded = animX + (animWidth * 2048);\r\n                const animYEncoded = animY + (animHeight * 2048);\r\n\r\n                let u0: number, v0: number, u1: number, v1: number, u2: number, v2: number, u3: number, v3: number;\r\n                if (rotate === 0) {\r\n                    u0 = u;\r\n                    v0 = v;\r\n                    u1 = u + w;\r\n                    v1 = v;\r\n                    u2 = u + w;\r\n                    v2 = v + h;\r\n                    u3 = u;\r\n                    v3 = v + h;\r\n                } else {\r\n                    let w2 = w / 2;\r\n                    let h2 = h / 2;\r\n                    if (rotate % 4 !== 0) {\r\n                        w2 = h / 2;\r\n                        h2 = w / 2;\r\n                    }\r\n                    const cX = u + w2;\r\n                    const cY = v + h2;\r\n\r\n                    rotate = groupD8.add(rotate, groupD8.NW);\r\n                    u0 = cX + (w2 * groupD8.uX(rotate));\r\n                    v0 = cY + (h2 * groupD8.uY(rotate));\r\n\r\n                    rotate = groupD8.add(rotate, 2); // rotate 90 degrees clockwise\r\n                    u1 = cX + (w2 * groupD8.uX(rotate));\r\n                    v1 = cY + (h2 * groupD8.uY(rotate));\r\n\r\n                    rotate = groupD8.add(rotate, 2);\r\n                    u2 = cX + (w2 * groupD8.uX(rotate));\r\n                    v2 = cY + (h2 * groupD8.uY(rotate));\r\n\r\n                    rotate = groupD8.add(rotate, 2);\r\n                    u3 = cX + (w2 * groupD8.uX(rotate));\r\n                    v3 = cY + (h2 * groupD8.uY(rotate));\r\n                }\r\n\r\n                arr[sz++] = x;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u0;\r\n                arr[sz++] = v0;\r\n                arr[sz++] = u + eps;\r\n                arr[sz++] = v + eps;\r\n                arr[sz++] = u + w - eps;\r\n                arr[sz++] = v + h - eps;\r\n                arr[sz++] = animXEncoded;\r\n                arr[sz++] = animYEncoded;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u1;\r\n                arr[sz++] = v1;\r\n                arr[sz++] = u + eps;\r\n                arr[sz++] = v + eps;\r\n                arr[sz++] = u + w - eps;\r\n                arr[sz++] = v + h - eps;\r\n                arr[sz++] = animXEncoded;\r\n                arr[sz++] = animYEncoded;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u2;\r\n                arr[sz++] = v2;\r\n                arr[sz++] = u + eps;\r\n                arr[sz++] = v + eps;\r\n                arr[sz++] = u + w - eps;\r\n                arr[sz++] = v + h - eps;\r\n                arr[sz++] = animXEncoded;\r\n                arr[sz++] = animYEncoded;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u3;\r\n                arr[sz++] = v3;\r\n                arr[sz++] = u + eps;\r\n                arr[sz++] = v + eps;\r\n                arr[sz++] = u + w - eps;\r\n                arr[sz++] = v + h - eps;\r\n                arr[sz++] = animXEncoded;\r\n                arr[sz++] = animYEncoded;\r\n                arr[sz++] = textureId;\r\n            }\r\n\r\n            vertexBuf.update(arr);\r\n        }\r\n\r\n        (renderer.geometry as any).bind(vb, shader);\r\n        renderer.geometry.draw(DRAW_MODES.TRIANGLES, rectsCount * 6, 0);\r\n    }\r\n\r\n    isModified(anim: boolean) {\r\n        if (this.modificationMarker !== this.pointsBuf.length ||\r\n            anim && this.hasAnim) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    clearModify() {\r\n        this.modificationMarker = this.pointsBuf.length;\r\n    }\r\n\r\n    protected _calculateBounds(): void\r\n    {\r\n        const { minX, minY, maxX, maxY } = this._$_localBounds;\r\n\r\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\r\n    }\r\n\r\n    public getLocalBounds(rect?: Rectangle): Rectangle\r\n    {\r\n        // we can do a fast local bounds if the sprite has no children!\r\n        if (this.children.length === 0)\r\n        {\r\n            return this._$_localBounds.getRectangle(rect);\r\n        }\r\n\r\n        return super.getLocalBounds.call(this, rect);\r\n    }\r\n\r\n    destroy(options?: any) {\r\n        super.destroy(options);\r\n        this.destroyVb();\r\n    }\r\n}\r\n","/// <reference path=\"types.d.ts\" />\r\n\r\nimport { Container } from '@pixi/display';\r\nimport { Texture, Renderer } from '@pixi/core';\r\nimport { Matrix } from '@pixi/math';\r\nimport { Constant } from './Constant';\r\nimport { RectTileLayer } from './RectTileLayer';\r\n\r\nexport class CompositeRectTileLayer extends Container {\r\n    constructor(zIndex?: number, bitmaps?: Array<Texture>, texPerChild?: number) {\r\n        super();\r\n        this.initialize.apply(this, arguments);\r\n    }\r\n\r\n    z: number;\r\n    zIndex: number;\r\n    modificationMarker = 0;\r\n    shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\r\n    _globalMat: Matrix = null;\r\n    _lastLayer: RectTileLayer = null;\r\n\r\n    texPerChild: number;\r\n    tileAnim: Array<number> = null;\r\n\r\n    initialize(zIndex?: number, bitmaps?: Array<Texture>, texPerChild?: number) {\r\n        if (texPerChild as any === true) {\r\n            //old format, ignore it!\r\n            texPerChild = 0;\r\n        }\r\n        this.z = this.zIndex = zIndex;\r\n        this.texPerChild = texPerChild || Constant.boundCountPerBuffer * Constant.maxTextures;\r\n        if (bitmaps) {\r\n            this.setBitmaps(bitmaps);\r\n        }\r\n    }\r\n\r\n    setBitmaps(bitmaps: Array<Texture>) {\r\n        for (let i=0;i<bitmaps.length;i++) {\r\n            if (bitmaps[i] && !bitmaps[i].baseTexture) {\r\n                throw new Error(`pixi-tilemap cannot use destroyed textures. `+\r\n                    `Probably, you passed resources['myAtlas'].texture in pixi > 5.2.1, it does not exist there.`);\r\n            }\r\n        }\r\n        let texPerChild = this.texPerChild;\r\n        let len1 = this.children.length;\r\n        let len2 = Math.ceil(bitmaps.length / texPerChild);\r\n        let i: number;\r\n        for (i = 0; i < len1; i++) {\r\n            (this.children[i] as RectTileLayer).textures = bitmaps.slice(i * texPerChild, (i + 1) * texPerChild);\r\n        }\r\n        for (i = len1; i < len2; i++) {\r\n            let layer = new RectTileLayer(this.zIndex, bitmaps.slice(i * texPerChild, (i + 1) * texPerChild));\r\n            layer.compositeParent = true;\r\n            layer.offsetX = Constant.boundSize;\r\n            layer.offsetY = Constant.boundSize;\r\n            this.addChild(layer);\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            (this.children[i] as RectTileLayer).clear();\r\n        }\r\n        this.modificationMarker = 0;\r\n    }\r\n\r\n    addRect(textureIndex: number, u: number, v: number, x: number, y: number, tileWidth: number, tileHeight: number, animX?: number, animY?: number, rotate?: number, animWidth?: number, animHeight?: number): this {\r\n        const childIndex: number = textureIndex / this.texPerChild >> 0;\r\n        const textureId: number = textureIndex % this.texPerChild;\r\n\r\n        if (this.children[childIndex] && (this.children[childIndex] as RectTileLayer).textures) {\r\n            this._lastLayer = (this.children[childIndex] as RectTileLayer);\r\n            this._lastLayer.addRect(textureId, u, v, x, y, tileWidth, tileHeight, animX, animY, rotate, animWidth, animHeight);\r\n        } else {\r\n            this._lastLayer = null;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    tileRotate(rotate: number): this {\r\n        if (this._lastLayer)\r\n        {\r\n            this._lastLayer.tileRotate(rotate);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    tileAnimX(offset: number, count: number): this {\r\n        if (this._lastLayer)\r\n        {\r\n            this._lastLayer.tileAnimX(offset, count);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    tileAnimY(offset: number, count: number): this {\r\n        if (this._lastLayer)\r\n        {\r\n            this._lastLayer.tileAnimY(offset, count);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    addFrame(texture_: Texture | String | number, x: number, y: number, animX?: number, animY?: number, animWidth?: number, animHeight?: number): this {\r\n        let texture: Texture;\r\n        let layer: RectTileLayer = null;\r\n        let ind: number = 0;\r\n        let children = this.children;\r\n\r\n        this._lastLayer = null;\r\n        if (typeof texture_ === \"number\") {\r\n            let childIndex = texture_ / this.texPerChild >> 0;\r\n            layer = children[childIndex] as RectTileLayer;\r\n\r\n            if (!layer) {\r\n                layer = children[0] as RectTileLayer;\r\n                if (!layer) {\r\n                    return this;\r\n                }\r\n                ind = 0;\r\n            } else {\r\n                ind = texture_ % this.texPerChild;\r\n            }\r\n\r\n            texture = layer.textures[ind];\r\n        } else {\r\n            if (typeof texture_ === \"string\") {\r\n                texture = Texture.from(texture_);\r\n            } else {\r\n                texture = texture_ as Texture;\r\n            }\r\n\r\n            for (let i = 0; i < children.length; i++) {\r\n                let child = children[i] as RectTileLayer;\r\n                let tex = child.textures;\r\n                for (let j = 0; j < tex.length; j++) {\r\n                    if (tex[j].baseTexture === texture.baseTexture) {\r\n                        layer = child;\r\n                        ind = j;\r\n                        break;\r\n                    }\r\n                }\r\n                if (layer) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!layer) {\r\n                for (let i = 0; i < children.length; i++) {\r\n                    let child = children[i] as RectTileLayer;\r\n                    if (child.textures.length < this.texPerChild) {\r\n                        layer = child;\r\n                        ind = child.textures.length;\r\n                        child.textures.push(texture);\r\n                        break;\r\n                    }\r\n                }\r\n                if (!layer) {\r\n                    layer = new RectTileLayer(this.zIndex, texture);\r\n                    layer.compositeParent = true;\r\n                    layer.offsetX = Constant.boundSize;\r\n                    layer.offsetY = Constant.boundSize;\r\n                    this.addChild(layer);\r\n                    ind = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._lastLayer = layer;\r\n        layer.addRect(ind, texture.frame.x, texture.frame.y, x, y, texture.orig.width, texture.orig.height, animX, animY, texture.rotate, animWidth, animHeight);\r\n        return this;\r\n    }\r\n\r\n    renderCanvas(renderer: any) {\r\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\r\n            return;\r\n        }\r\n        let plugin = renderer.plugins.tilemap;\r\n        if (!plugin.dontUseTransform) {\r\n            let wt = this.worldTransform;\r\n            renderer.context.setTransform(\r\n                wt.a,\r\n                wt.b,\r\n                wt.c,\r\n                wt.d,\r\n                wt.tx * renderer.resolution,\r\n                wt.ty * renderer.resolution\r\n            );\r\n        }\r\n        let layers = this.children;\r\n        for (let i = 0; i < layers.length; i++) {\r\n            const layer = (layers[i] as RectTileLayer);\r\n            layer.tileAnim = this.tileAnim;\r\n            layer.renderCanvasCore(renderer);\r\n        }\r\n    }\r\n\r\n    render(renderer: Renderer) {\r\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\r\n            return;\r\n        }\r\n        let plugin = (renderer.plugins as any)['tilemap'];\r\n        let shader = plugin.getShader();\r\n        renderer.batch.setObjectRenderer(plugin);\r\n        //TODO: dont create new array, please\r\n        this._globalMat = shader.uniforms.projTransMatrix;\r\n        renderer.globalUniforms.uniforms.projectionMatrix.copyTo(this._globalMat).append(this.worldTransform);\r\n        shader.uniforms.shadowColor = this.shadowColor;\r\n        shader.uniforms.animationFrame = this.tileAnim || plugin.tileAnim;\r\n        renderer.shader.bind(shader, false);\r\n        let layers = this.children;\r\n        for (let i = 0; i < layers.length; i++) {\r\n            const layer = (layers[i] as RectTileLayer);\r\n            layer.renderWebGLCore(renderer, plugin);\r\n        }\r\n    }\r\n\r\n    isModified(anim: boolean) {\r\n        let layers = this.children;\r\n        if (this.modificationMarker !== layers.length) {\r\n            return true;\r\n        }\r\n        for (let i = 0; i < layers.length; i++) {\r\n            if ((layers[i] as RectTileLayer).isModified(anim)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    clearModify() {\r\n        let layers = this.children;\r\n        this.modificationMarker = layers.length;\r\n        for (let i = 0; i < layers.length; i++) {\r\n            (layers[i] as RectTileLayer).clearModify();\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"types.d.ts\" />\r\n\r\nimport { Matrix } from '@pixi/math';\r\nimport { Graphics } from '@pixi/graphics';\r\n\r\nexport class GraphicsLayer extends Graphics {\r\n    constructor(zIndex: number) {\r\n        super();\r\n        this.zIndex = zIndex;\r\n    }\r\n\r\n    renderCanvas(renderer: any) {\r\n        let wt: Matrix = null;\r\n        if (renderer.plugins.tilemap.dontUseTransform) {\r\n            wt = this.transform.worldTransform;\r\n            this.transform.worldTransform = Matrix.IDENTITY;\r\n        }\r\n        renderer.plugins.graphics.render(this);\r\n        if (renderer.plugins.tilemap.dontUseTransform) {\r\n            this.transform.worldTransform = wt;\r\n        }\r\n        renderer.context.globalAlpha = 1.0;\r\n    }\r\n\r\n    // renderWebGL(renderer: PIXI.Renderer) {\r\n    //     if (!this._webGL[renderer.CONTEXT_UID])\r\n    //         this.dirty++;\r\n    //     super.renderWebGL(renderer)\r\n    // }\r\n\r\n    isModified(anim: boolean): boolean {\r\n        return false;\r\n    }\r\n\r\n    clearModify() {\r\n    }\r\n}\r\n","/// <reference path=\"types.d.ts\" />\r\n\r\nimport { ALPHA_MODES } from '@pixi/constants';\r\nimport { BaseTexture, Renderer, Texture, GLTexture, resources } from '@pixi/core';\r\nimport { Sprite } from '@pixi/sprite';\r\nimport { Constant } from './Constant';\r\n\r\nexport interface IMultiTextureOptions {\r\n\tboundCountPerBuffer: number;\r\n\tboundSize: number;\r\n\tbufferSize: number;\r\n\tDO_CLEAR?: boolean;\r\n}\r\n\r\nexport class MultiTextureResource extends resources.Resource {\r\n\tconstructor(options: IMultiTextureOptions) {\r\n\t\tsuper(options.bufferSize, options.bufferSize);\r\n\r\n\t\tconst bounds = this.boundSprites;\r\n\t\tconst dirties = this.dirties;\r\n\t\tthis.boundSize = options.boundSize;\r\n\t\tfor (let j = 0; j < options.boundCountPerBuffer; j++) {\r\n\t\t\tconst spr = new Sprite();\r\n\t\t\tspr.position.x = options.boundSize * (j & 1);\r\n\t\t\tspr.position.y = options.boundSize * (j >> 1);\r\n\t\t\tbounds.push(spr);\r\n\t\t\tdirties.push(0);\r\n\t\t}\r\n\t\tthis.DO_CLEAR = !!options.DO_CLEAR;\r\n\t}\r\n\r\n\tDO_CLEAR = false;\r\n\tboundSize: number = 0;\r\n\t_clearBuffer: Uint8Array = null;\r\n\r\n\tbind(baseTexture: BaseTexture) {\r\n\t\tif (this.baseTex) {\r\n\t\t\tthrow new Error('Only one baseTexture is allowed for this resource!')\r\n\t\t}\r\n\t\tthis.baseTex = baseTexture;\r\n\t\tsuper.bind(baseTexture);\r\n\t}\r\n\r\n\tbaseTex: BaseTexture = null;\r\n\tboundSprites: Array<Sprite> = [];\r\n\tdirties: Array<number> = [];\r\n\r\n\tsetTexture(ind: number, texture: Texture) {\r\n\t\tconst spr = this.boundSprites[ind];\r\n\t\tif (spr.texture.baseTexture === texture.baseTexture) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tspr.texture = texture;\r\n\t\tthis.baseTex.update();\r\n\t\tthis.dirties[ind] = (this.baseTex as any).dirtyId;\r\n\t}\r\n\r\n\tupload(renderer: Renderer, texture: BaseTexture, glTexture: GLTexture) {\r\n\t\tconst { gl } = renderer as any;\r\n\r\n\t\tconst {width, height} = this;\r\n\t\tgl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.alphaMode === undefined ||\r\n\t\t\ttexture.alphaMode === ALPHA_MODES.UNPACK);\r\n\r\n\t\tif (glTexture.dirtyId < 0) {\r\n\t\t\t(glTexture as any).width = width;\r\n\t\t\t(glTexture as any).height = height;\r\n\r\n\t\t\tgl.texImage2D(texture.target, 0,\r\n\t\t\t\ttexture.format,\r\n\t\t\t\twidth,\r\n\t\t\t\theight,\r\n\t\t\t\t0,\r\n\t\t\t\ttexture.format,\r\n\t\t\t\ttexture.type,\r\n\t\t\t\tnull);\r\n\t\t}\r\n\r\n\t\tconst doClear = this.DO_CLEAR;\r\n\t\tif (doClear && !this._clearBuffer) {\r\n\t\t\tthis._clearBuffer = new Uint8Array(Constant.boundSize * Constant.boundSize * 4);\r\n\t\t}\r\n\r\n\t\tconst bounds = this.boundSprites;\r\n\t\tfor (let i = 0; i < bounds.length; i++) {\r\n\t\t\tconst spr = bounds[i];\r\n\t\t\tconst tex = spr.texture.baseTexture;\r\n\t\t\tif (glTexture.dirtyId >= this.dirties[i]) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tconst res = tex.resource as any;\r\n\t\t\tif (!tex.valid || !res || !res.source) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (doClear && (tex.width < this.boundSize || tex.height < this.boundSize))\r\n\t\t\t{\r\n\t\t\t\tgl.texSubImage2D(texture.target, 0,\r\n\t\t\t\t\tspr.position.x,\r\n\t\t\t\t\tspr.position.y,\r\n\t\t\t\t\tthis.boundSize,\r\n\t\t\t\t\tthis.boundSize,\r\n\t\t\t\t\ttexture.format,\r\n\t\t\t\t\ttexture.type,\r\n\t\t\t\t\tthis._clearBuffer);\r\n\t\t\t}\r\n\t\t\tgl.texSubImage2D(texture.target, 0,\r\n\t\t\t\tspr.position.x,\r\n\t\t\t\tspr.position.y,\r\n\t\t\t\ttexture.format,\r\n\t\t\t\ttexture.type,\r\n\t\t\t\tres.source);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n","import { Constant } from './Constant';\r\n\r\nimport type { TilemapShader } from './RectTileShader';\r\n\r\n\r\nexport function fillSamplers(shader: TilemapShader, maxTextures: number) {\r\n    let sampleValues: Array<number> = [];\r\n    for (let i = 0; i < maxTextures; i++)\r\n    {\r\n        sampleValues[i] = i;\r\n    }\r\n    shader.uniforms.uSamplers = sampleValues;\r\n\r\n    let samplerSize: Array<number> = [];\r\n    for (let i = 0; i < maxTextures; i++) {\r\n        samplerSize.push(1.0 / Constant.bufferSize);\r\n        samplerSize.push(1.0 / Constant.bufferSize);\r\n    }\r\n    shader.uniforms.uSamplerSize = samplerSize;\r\n}\r\n\r\nexport function generateFragmentSrc(maxTextures: number, fragmentSrc: string) {\r\n    return fragmentSrc.replace(/%count%/gi, maxTextures + \"\")\r\n        .replace(/%forloop%/gi, generateSampleSrc(maxTextures));\r\n}\r\n\r\nexport function generateSampleSrc(maxTextures: number) {\r\n    let src = '';\r\n\r\n    src += '\\n';\r\n    src += '\\n';\r\n\r\n    src += 'if(vTextureId <= -1.0) {';\r\n    src += '\\n\\tcolor = shadowColor;';\r\n    src += '\\n}';\r\n\r\n    for (let i = 0; i < maxTextures; i++)\r\n    {\r\n        src += '\\nelse ';\r\n\r\n        if(i < maxTextures-1)\r\n        {\r\n            src += 'if(textureId == ' + i + '.0)';\r\n        }\r\n\r\n        src += '\\n{';\r\n        src += '\\n\\tcolor = texture2D(uSamplers['+i+'], textureCoord * uSamplerSize['+i+']);';\r\n        src += '\\n}';\r\n    }\r\n\r\n    src += '\\n';\r\n    src += '\\n';\r\n\r\n    return src;\r\n}\r\n","/// <reference path=\"types.d.ts\" />\r\n\r\nimport * as shaderGenerator from './shaderGenerator';\r\n\r\nimport { Buffer, Geometry, Shader, Program } from '@pixi/core';\r\nimport { Matrix } from '@pixi/math';\r\n\r\nlet rectShaderFrag = `\r\nvarying vec2 vTextureCoord;\r\nvarying vec4 vFrame;\r\nvarying float vTextureId;\r\nuniform vec4 shadowColor;\r\nuniform sampler2D uSamplers[%count%];\r\nuniform vec2 uSamplerSize[%count%];\r\n\r\nvoid main(void){\r\n   vec2 textureCoord = clamp(vTextureCoord, vFrame.xy, vFrame.zw);\r\n   float textureId = floor(vTextureId + 0.5);\r\n\r\n   vec4 color;\r\n   %forloop%\r\n   gl_FragColor = color;\r\n}\r\n`;\r\nlet rectShaderVert = `\r\nattribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\nattribute vec4 aFrame;\r\nattribute vec2 aAnim;\r\nattribute float aTextureId;\r\n\r\nuniform mat3 projTransMatrix;\r\nuniform vec2 animationFrame;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vFrame;\r\n\r\nvoid main(void){\r\n   gl_Position = vec4((projTransMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n   vec2 animCount = floor((aAnim + 0.5) / 2048.0);\r\n   vec2 animFrameOffset = aAnim - animCount * 2048.0;\r\n   vec2 animOffset = animFrameOffset * floor(mod(animationFrame + 0.5, animCount));\r\n\r\n   vTextureCoord = aTextureCoord + animOffset;\r\n   vFrame = aFrame + vec4(animOffset, animOffset);\r\n   vTextureId = aTextureId;\r\n}\r\n`;\r\n\r\nexport abstract class TilemapShader extends Shader {\r\n\tmaxTextures = 0;\r\n\r\n\tconstructor(maxTextures: number, shaderVert: string, shaderFrag: string) {\r\n\t\tsuper(\r\n\t\t\tnew Program(\r\n\t\t\t\tshaderVert,\r\n\t\t\t\tshaderFrag),\r\n\t\t\t{\r\n\t\t\t\tanimationFrame: new Float32Array(2),\r\n\t\t\t\tuSamplers: [],\r\n\t\t\t\tuSamplerSize: [],\r\n\t\t\t\tprojTransMatrix: new Matrix()\r\n\t\t\t}\r\n\t\t);\r\n\t\tthis.maxTextures = maxTextures;\r\n\t\tshaderGenerator.fillSamplers(this, this.maxTextures);\r\n\t}\r\n}\r\n\r\nexport class RectTileShader extends TilemapShader {\r\n\tconstructor(maxTextures: number) {\r\n\t\tsuper(\r\n\t\t\tmaxTextures,\r\n\t\t\trectShaderVert,\r\n\t\t\tshaderGenerator.generateFragmentSrc(maxTextures, rectShaderFrag)\r\n\t\t);\r\n\t\tshaderGenerator.fillSamplers(this, this.maxTextures);\r\n\t}\r\n}\r\n\r\nexport class RectTileGeom extends Geometry {\r\n\tvertSize = 11;\r\n\tvertPerQuad = 4;\r\n\tstride = this.vertSize * 4;\r\n\tlastTimeAccess = 0;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tconst buf = this.buf = new Buffer(new Float32Array(2), true, false);\r\n\t\tthis.addAttribute('aVertexPosition', buf, 0, false, 0, this.stride, 0)\r\n\t\t\t.addAttribute('aTextureCoord', buf, 0, false, 0, this.stride, 2 * 4)\r\n\t\t\t.addAttribute('aFrame', buf, 0, false, 0, this.stride, 4 * 4)\r\n\t\t\t.addAttribute('aAnim', buf, 0, false, 0, this.stride, 8 * 4)\r\n\t\t\t.addAttribute('aTextureId', buf, 0, false, 0, this.stride, 10 * 4);\r\n\t}\r\n\r\n\tbuf: Buffer;\r\n}\r\n","import { WRAP_MODES } from '@pixi/constants';\r\nimport { BaseTexture, Buffer, resources, ObjectRenderer, Texture, Renderer } from '@pixi/core';\r\nimport { Constant } from './Constant';\r\nimport { RectTileGeom, RectTileShader } from './RectTileShader';\r\nimport { MultiTextureResource } from './MultiTextureResource';\r\n\r\nimport type { TilemapShader } from './RectTileShader';\r\n\r\n/**\r\n * Renderer for rectangle tiles.\r\n */\r\nexport class TileRenderer extends ObjectRenderer {\r\n\trenderer: Renderer;\r\n\tgl: WebGLRenderingContext;\r\n\tsn: number = -1;\r\n\tindexBuffer: Buffer = null;\r\n\tibLen: number = 0;\r\n\ttileAnim = [0, 0];\r\n\ttexLoc: Array<number> = [];\r\n\r\n\trectShader: RectTileShader;\r\n\ttexResources: Array<MultiTextureResource> = [];\r\n\r\n\tconstructor(renderer: Renderer) {\r\n\t\tsuper(renderer);\r\n\t\tthis.rectShader = new RectTileShader(Constant.maxTextures);\r\n\t\tthis.indexBuffer = new Buffer(undefined, true, true);\r\n\t\tthis.checkIndexBuffer(2000);\r\n\t\tthis.initBounds();\r\n\t}\r\n\r\n\tinitBounds() {\r\n\t\tif (Constant.boundCountPerBuffer <= 1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst maxTextures = Constant.maxTextures;\r\n\t\tfor (let i = 0; i < maxTextures; i++) {\r\n\t\t\tconst resource = new MultiTextureResource(Constant);\r\n\t\t\tconst baseTex = new BaseTexture(resource);\r\n\t\t\tbaseTex.scaleMode = Constant.SCALE_MODE;\r\n\t\t\tbaseTex.wrapMode = WRAP_MODES.CLAMP;\r\n\t\t\tthis.texResources.push(resource);\r\n\t\t}\r\n\t}\r\n\r\n\tbindTexturesWithoutRT(renderer: Renderer, shader: TilemapShader, textures: Array<Texture>) {\r\n\t\tlet samplerSize: Array<number> = (shader as any).uniforms.uSamplerSize;\r\n\t\tthis.texLoc.length = 0;\r\n\t\tfor (let i = 0; i < textures.length; i++) {\r\n\t\t\tconst texture = textures[i];\r\n\t\t\tif (!texture || !texture.valid) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\trenderer.texture.bind(textures[i], i);\r\n\t\t\t//TODO: add resolution here\r\n\t\t\tsamplerSize[i * 2] = 1.0 / textures[i].baseTexture.width;\r\n\t\t\tsamplerSize[i * 2 + 1] = 1.0 / textures[i].baseTexture.height;\r\n\t\t}\r\n\t\t(shader as any).uniforms.uSamplerSize = samplerSize;\r\n\t}\r\n\r\n\tbindTextures(renderer: Renderer, shader: TilemapShader, textures: Array<Texture>) {\r\n\t\tconst len = textures.length;\r\n\t\tconst maxTextures = Constant.maxTextures;\r\n\t\tif (len > Constant.boundCountPerBuffer * maxTextures) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (Constant.boundCountPerBuffer <= 1) {\r\n\t\t\tthis.bindTexturesWithoutRT(renderer, shader, textures);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet i = 0;\r\n\t\tfor (; i < len; i++) {\r\n\t\t\tconst texture = textures[i];\r\n\t\t\tif (!texture || !texture.valid) continue;\r\n\t\t\tconst multi = this.texResources[i >> 2];\r\n\t\t\tmulti.setTexture(i & 3, texture);\r\n\t\t}\r\n\r\n\t\tlet gltsUsed = (i + 3) >> 2;\r\n\t\tfor (i = 0; i < gltsUsed; i++) {\r\n\t\t\t//remove \"i, true\" after resolving a bug\r\n\t\t\trenderer.texture.bind(this.texResources[i].baseTex, i);\r\n\t\t}\r\n\t}\r\n\r\n\tstart() {\r\n\t\t//sorry, nothing\r\n\t}\r\n\r\n\tcreateVb() {\r\n\t\tconst geom = new RectTileGeom();\r\n\t\tgeom.addIndex(this.indexBuffer);\r\n\t\tgeom.lastTimeAccess = Date.now();\r\n\t\treturn geom;\r\n\t}\r\n\r\n\tcheckIndexBuffer(size: number, vb: RectTileGeom = null) {\r\n\t\tconst totalIndices = size * 6;\r\n\r\n\t\tif (totalIndices <= this.ibLen) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet len = totalIndices;\r\n\t\twhile (len < totalIndices) {\r\n\t\t\tlen <<= 1;\r\n\t\t}\r\n\r\n\t\tthis.ibLen = totalIndices;\r\n\t\tthis.indexBuffer.update((PIXI as any).utils.createIndicesForQuads(size,\r\n\t\t\tConstant.use32bitIndex ? new Uint32Array(size * 6) : undefined));\r\n\r\n\t\t// \tTODO: create new index buffer instead?\r\n\t\t// if (vb) {\r\n\t\t// \tconst curIndex = vb.getIndex();\r\n\t\t// \tif (curIndex !== this.indexBuffer && (curIndex.data as any).length < totalIndices) {\r\n\t\t// \t\tthis.swapIndex(vb, this.indexBuffer);\r\n\t\t// \t}\r\n\t\t// }\r\n\t}\r\n\r\n\t// swapIndex(geom: PIXI.Geometry, indexBuf: PIXI.Buffer) {\r\n\t\t// let buffers = (geom as any).buffers;\r\n\t\t// const oldIndex = geom.getIndex();\r\n\t\t// let ind = buffers.indexOf(oldIndex);\r\n\t\t// if (ind >= 0) {\r\n\t\t// \tbuffers.splice(ind, 1);\r\n\t\t// }\r\n\t\t// geom.addIndex(indexBuf);\r\n\t// }\r\n\r\n\tgetShader(): TilemapShader {\r\n\t\treturn this.rectShader;\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tsuper.destroy();\r\n\t\t// this.rectShader.destroy();\r\n\t\tthis.rectShader = null;\r\n\t}\r\n}\r\n\r\nRenderer.registerPlugin('tilemap', TileRenderer as any);\r\n","/// <reference path=\"types.d.ts\" />\r\n\r\nimport { Container } from '@pixi/display';\r\n\r\nimport type { CompositeRectTileLayer } from './CompositeRectTileLayer';\r\nimport type { Matrix } from '@pixi/math';\r\n\r\nexport class ZLayer extends Container {\r\n\r\n    constructor(tilemap: Container, zIndex: number) {\r\n        super();\r\n        this.tilemap = tilemap;\r\n        this.z = zIndex;\r\n    }\r\n\r\n    tilemap: any;\r\n    z: number;\r\n    zIndex: number;\r\n    _previousLayers: number;\r\n    canvasBuffer: HTMLCanvasElement;\r\n    _tempRender: any;\r\n    _lastAnimationFrame: number = -1;\r\n    layerTransform: Matrix;\r\n\r\n    clear() {\r\n        let layers = this.children as Array<CompositeRectTileLayer>;\r\n        for (let i = 0; i < layers.length; i++)\r\n            layers[i].clear();\r\n        this._previousLayers = 0;\r\n    }\r\n\r\n    cacheIfDirty() {\r\n        let tilemap: any = this.tilemap;\r\n        let layers = this.children as Array<CompositeRectTileLayer>;\r\n        let modified = this._previousLayers !== layers.length;\r\n        this._previousLayers = layers.length;\r\n        let buf = this.canvasBuffer;\r\n        let tempRender = this._tempRender;\r\n        if (!buf) {\r\n            buf = this.canvasBuffer = document.createElement('canvas');\r\n            tempRender = this._tempRender = new (PIXI as any).CanvasRenderer({width: 100, height: 100, view: buf});\r\n            tempRender.context = tempRender.rootContext;\r\n            tempRender.plugins.tilemap.dontUseTransform = true;\r\n        }\r\n        if (buf.width !== tilemap._layerWidth ||\r\n            buf.height !== tilemap._layerHeight) {\r\n            buf.width = tilemap._layerWidth;\r\n            buf.height = tilemap._layerHeight;\r\n            modified = true;\r\n        }\r\n        let i: number;\r\n        if (!modified) {\r\n            for (i = 0; i < layers.length; i++) {\r\n                if (layers[i].isModified(this._lastAnimationFrame !== tilemap.animationFrame)) {\r\n                    modified = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this._lastAnimationFrame = tilemap.animationFrame;\r\n        if (modified) {\r\n            if (tilemap._hackRenderer) {\r\n                tilemap._hackRenderer(tempRender);\r\n            }\r\n            tempRender.context.clearRect(0, 0, buf.width, buf.height);\r\n            for (i = 0; i < layers.length; i++) {\r\n                layers[i].clearModify();\r\n                layers[i].renderCanvas(tempRender);\r\n            }\r\n        }\r\n        this.layerTransform = this.worldTransform;\r\n        for (i = 0; i < layers.length; i++) {\r\n            this.layerTransform = layers[i].worldTransform;\r\n            break;\r\n        }\r\n    }\r\n\r\n    renderCanvas(renderer: any) {\r\n        this.cacheIfDirty();\r\n        let wt = this.layerTransform;\r\n        renderer.context.setTransform(\r\n            wt.a,\r\n            wt.b,\r\n            wt.c,\r\n            wt.d,\r\n            wt.tx * renderer.resolution,\r\n            wt.ty * renderer.resolution\r\n        );\r\n        let tilemap = this.tilemap;\r\n        renderer.context.drawImage(this.canvasBuffer, 0, 0);\r\n    }\r\n}\r\n","import { CanvasTileRenderer } from './CanvasTileRenderer';\r\nimport { CompositeRectTileLayer } from './CompositeRectTileLayer';\r\nimport { Constant } from './Constant';\r\nimport { GraphicsLayer } from './GraphicsLayer';\r\nimport { MultiTextureResource } from './MultiTextureResource';\r\nimport { RectTileLayer } from './RectTileLayer';\r\nimport { TilemapShader, RectTileShader, RectTileGeom } from './RectTileShader';\r\nimport { TileRenderer } from './TileRenderer';\r\nimport { ZLayer } from './ZLayer';\r\n\r\nexport const pixi_tilemap = {\r\n    CanvasTileRenderer,\r\n    CompositeRectTileLayer,\r\n    Constant,\r\n    GraphicsLayer,\r\n    MultiTextureResource,\r\n    RectTileLayer,\r\n    TilemapShader,\r\n    RectTileShader,\r\n    RectTileGeom,\r\n    TileRenderer,\r\n    ZLayer,\r\n};\r\n\r\nexport * from './CanvasTileRenderer';\r\nexport * from './CompositeRectTileLayer';\r\nexport * from './Constant';\r\nexport * from './GraphicsLayer';\r\nexport * from './MultiTextureResource';\r\nexport * from './RectTileLayer';\r\nexport * from './RectTileShader';\r\nexport * from './shaderGenerator';\r\nexport * from './TileRenderer';\r\nexport * from './ZLayer';"],"names":["SCALE_MODES","Container","Bounds","Texture","groupD8","DRAW_MODES","Graphics","Matrix","resources","Sprite","ALPHA_MODES","Shader","Program","shaderGenerator.fillSamplers","shaderGenerator.generateFragmentSrc","Geometry","Buffer","ObjectRenderer","BaseTexture","WRAP_MODES","Renderer"],"mappings":"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"}